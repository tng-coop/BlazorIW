@implements IDisposable

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<NavMenu> L

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorIW</a>
    </div>
</div>

<input type="checkbox" title='@L["Navigation menu"]' class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> @L["Home"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> @L["Counter"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> @L["Weather"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="files">
                <span class="bi bi-folder-nav-menu" aria-hidden="true"></span> @L["File List"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="storage">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> @L["Storage Demo"]
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="wordpress-posts">
                <span class="bi bi-journal-text-nav-menu" aria-hidden="true"></span> @L["Wordpress Posts"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="titles">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> @L["Titles"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="d3">
                <span class="bi bi-diagram-3-nav-menu" aria-hidden="true"></span> @L["D3 Demo"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="inspect">
                <span class="bi bi-search-nav-menu" aria-hidden="true"></span> @L["Inspector"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="auth">
                <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> @L["Auth Required"]
            </NavLink>
        </div>
        @if (NavigationManager.Uri.Contains("/Account", StringComparison.OrdinalIgnoreCase) || isAuthenticated)
        {
            <AuthorizeView Context="authState">
                <Authorized>
                    <AuthorizeView Roles="admin">
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="Account/Admin/Users">
                                <span class="bi bi-person-gear-nav-menu" aria-hidden="true"></span> @L["Admin"]
                            </NavLink>
                        </div>
                    </AuthorizeView>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Manage">
                            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @authState.User.Identity?.Name
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="nav-link">
                                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> @L["Logout"]
                            </button>
                        </form>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Register">
                            <span class="bi bi-person-nav-menu" aria-hidden="true"></span> @L["Register"]
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Login">
                            <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> @L["Login"]
                        </NavLink>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        }
    </nav>
</div>

@code {
    private string? currentUrl;

    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateAuthenticationStateAsync();
    }

    private async Task UpdateAuthenticationStateAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var state = await task;
        isAuthenticated = state.User.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
