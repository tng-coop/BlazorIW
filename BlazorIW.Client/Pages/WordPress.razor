@page "/wordpress-posts"
@rendermode InteractiveWebAssembly
@using System.Text.Json
@using Microsoft.AspNetCore.Components

<PageTitle>WordPress Posts</PageTitle>

@inject WordPressService WordPressSvc
@inject BrowserStorageService Storage
@inject HtmlContentService HtmlSvc

<h1>WordPress Posts</h1>

<div class="mb-3">
    <input class="form-control" placeholder="Enter base API URL" @bind="baseUrl" />
</div>
<button class="btn btn-primary mb-3" @onclick="LoadPosts">Fetch Posts</button>
<button class="btn btn-secondary mb-3 ms-2" @onclick="ToggleSummary" disabled="@(posts is null)">
    @(showSummary ? "Show JSON" : "Show Summary")
</button>
<button class="btn btn-success mb-3 ms-2" @onclick="ImportPosts" disabled="@(posts is null)">Import Posts</button>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else if (posts != null)
{
    if (showSummary)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Title</th>
                    <th>Excerpt</th>
                    <th>Content</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in Summaries ?? Enumerable.Empty<PostSummary>())
                {
                    <tr>
                        <td>@p.Date</td>
                        <td>@((MarkupString)p.Title)</td>
                        <td>@((MarkupString)p.Excerpt)</td>
                        <td>@((MarkupString)p.Content)</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (posts != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Exists</th>
                    <th>Json</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in posts)
                {
                    var title = p.GetProperty("title").GetProperty("rendered").GetString() ?? string.Empty;
                    var json = JsonSerializer.Serialize(p, new JsonSerializerOptions { WriteIndented = true });
                    <tr>
                        <td>@(existingTitles.Contains(title.Trim()) ? "✔" : "✖")</td>
                        <td><pre>@json</pre></td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private const string UrlKey = "wordpress-base-url";
    private const string PostsKey = "wordpress-posts";

    private string? baseUrl;
    private List<JsonElement>? posts;
    private bool isLoading;
    private string? errorMessage;
    private bool showSummary;
    private HashSet<string> existingTitles = new();

    private IEnumerable<PostSummary>? Summaries => posts?.Select(p => new PostSummary(
        p.GetProperty("date").GetString() ?? string.Empty,
        p.GetProperty("title").GetProperty("rendered").GetString() ?? string.Empty,
        p.GetProperty("excerpt").GetProperty("rendered").GetString() ?? string.Empty,
        p.GetProperty("content").GetProperty("rendered").GetString() ?? string.Empty
    ));

    private record PostSummary(string Date, string Title, string Excerpt, string Content);

    private string? postsJson => posts is null ? null : JsonSerializer.Serialize(posts, new JsonSerializerOptions { WriteIndented = true });

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            existingTitles = await HtmlSvc.GetTitlesAsync();
            baseUrl = await Storage.GetLocalStorageAsync(UrlKey);
            var json = await Storage.GetLocalStorageAsync(PostsKey);
            if (!string.IsNullOrEmpty(json))
            {
                try
                {
                    posts = JsonSerializer.Deserialize<List<JsonElement>>(json);
                }
                catch
                {
                    posts = null;
                }
            }
            StateHasChanged();
        }
    }

    private async Task LoadPosts()
    {
        if (string.IsNullOrWhiteSpace(baseUrl))
        {
            errorMessage = "Please enter a URL.";
            posts = null;
            return;
        }

        isLoading = true;
        errorMessage = null;
        posts = null;
        try
        {
            existingTitles = await HtmlSvc.GetTitlesAsync();
            posts = await WordPressSvc.FetchPostsAsync(baseUrl);
            if (posts.Count == 0)
            {
                errorMessage = "No posts found.";
            }
            await Storage.SetLocalStorageAsync(UrlKey, baseUrl);
            await Storage.SetLocalStorageAsync(PostsKey, postsJson ?? string.Empty);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleSummary()
    {
        showSummary = !showSummary;
    }

    private async Task ImportPosts()
    {
        if (posts is null)
        {
            return;
        }

        var list = Summaries?.Select(s => new ImportPostDto(s.Date, s.Title, s.Excerpt, s.Content)).ToList() ?? new();
        try
        {
            await HtmlSvc.ImportPostsAsync(list);
            existingTitles = await HtmlSvc.GetTitlesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
