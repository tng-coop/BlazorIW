@page "/user-management"
@rendermode InteractiveWebAssembly
@attribute [Authorize(Roles = "admin")]

@using Microsoft.AspNetCore.Authorization

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims

@inject UserService UserSvc

<h1>User Management</h1>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Role</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var u in users)
        {
            <tr>
                <td>@u.Email @if (u.Id == currentUserId) { <span class="text-muted">(you)</span> }</td>
                <td>@string.Join(", ", u.Roles)</td>
                <td>@(u.IsDisabled ? "Disabled" : "Active")</td>
                <td>
                @if (u.Id != currentUserId)
                {
                    if (u.Roles.Contains("admin"))
                    {
                        <button class="btn btn-sm btn-secondary me-1" @onclick="@(() => ChangeRoleAsync(u, \"editor\"))">Demote to Editor</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-secondary me-1" @onclick="@(() => ChangeRoleAsync(u, \"admin\"))">Promote to Admin</button>
                    }
                    if (u.IsDisabled)
                    {
                        <button class="btn btn-sm btn-warning" @onclick="() => ToggleDisabledAsync(u, false)">Enable</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-warning" @onclick="() => ToggleDisabledAsync(u, true)">Disable</button>
                    }
                }
                else
                {
                    <em>N/A</em>
                }
                </td>
            </tr>
        }
        </tbody>
    </table>

    <h3>Add User</h3>
    <EditForm Model="newUser" OnValidSubmit="AddUserAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <InputText class="form-control" @bind-Value="newUser.Email" placeholder="Email" />
        </div>
        <div class="mb-3">
            <InputText type="password" class="form-control" @bind-Value="newUser.Password" placeholder="Password" />
        </div>
        <div class="mb-3">
            <select class="form-select" @bind="newUser.Role">
                <option value="admin">Admin</option>
                <option value="editor">Editor</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary">Add User</button>
    </EditForm>
}

@code {
    private List<UserInfo>? users;
    private string? currentUserId;

    private NewUser newUser = new();

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        users = await UserSvc.GetUsersAsync();
    }

    private async Task AddUserAsync()
    {
        await UserSvc.CreateUserAsync(newUser.Email, newUser.Password, newUser.Role);
        newUser = new();
        await LoadAsync();
    }

    private async Task ChangeRoleAsync(UserInfo user, string role)
    {
        await UserSvc.SetRoleAsync(user.Id, role);
        await LoadAsync();
    }

    private async Task ToggleDisabledAsync(UserInfo user, bool disabled)
    {
        await UserSvc.SetDisabledAsync(user.Id, disabled);
        await LoadAsync();
    }

    private class NewUser
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
        [Required]
        public string Role { get; set; } = "editor";
    }
}
