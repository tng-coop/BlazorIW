@page "/titles"

<PageTitle>Titles</PageTitle>

@inject HtmlContentService HtmlSvc
@inject AuthenticationStateProvider AuthStateProvider

<h1>Titles</h1>

@if (items == null)
{
    <p><em>Loading...</em></p>
}
else if (items.Count == 0)
{
    <p>No entries found.</p>
}
else
{
    <ul class="list-group">
        @foreach (var item in items)
        {
            var expanded = expandedItemStates.TryGetValue(item.Id, out var st) && st.Expanded;
            var showFull = expandedItemStates.TryGetValue(item.Id, out st) && st.ShowFull;
            <li class="list-group-item title-item">
                <button class="title-button" @onclick="() => ToggleItem(item.Id)">
                    @item.Date.ToString("yyyy-MM-dd") - @item.Title
                </button>
                <div class="excerpt-container @(expanded ? "expanded" : string.Empty)">
                    @if (expanded)
                    {
                        @if (showFull)
                        {
                            <div class="mb-2">
                                @((MarkupString)item.Content)
                            </div>
                            <button class="btn btn-sm btn-secondary me-1" @onclick="() => ShowExcerpt(item.Id)">Show Excerpt</button>
                        }
                        else
                        {
                            <div class="mb-2">
                                @((MarkupString)item.Excerpt)
                            </div>
                            <button class="btn btn-sm btn-secondary me-1" @onclick="() => ShowFull(item.Id)">Show Full</button>
                        }
                        <AuthorizeView>
                            <div class="mb-2">Status: @GetStatusValue(item)</div>
                        </AuthorizeView>
                        <AuthorizeView Roles="admin">
                            <select class="form-select form-select-sm w-auto mb-2" value="@GetStatusValue(item)" @onchange="async e => await ChangeStatusAsync(item, e.Value?.ToString())">
                                <option value="Draft">Draft</option>
                                <option value="Review">Review</option>
                                <option value="Published">Published</option>
                            </select>
                        </AuthorizeView>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => Collapse(item.Id)">Collapse</button>
                    }
                </div>
            </li>
        }
    </ul>
}

@code {
    private List<HtmlContentDto>? items;

    private readonly Dictionary<Guid, ItemState> expandedItemStates = new();

    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        var fetched = await HtmlSvc.GetAllAsync();
        var ordered = fetched
            .OrderByDescending(i => i.Date)
            .ToList();

        items = isAuthenticated
            ? ordered
            : ordered.Where(i => i.IsPublished).ToList();
    }

    private void ToggleItem(Guid id)
    {
        if (!expandedItemStates.TryGetValue(id, out var state))
        {
            state = new ItemState { Expanded = true };
            expandedItemStates[id] = state;
        }
        else
        {
            state.Expanded = !state.Expanded;
            if (!state.Expanded)
            {
                state.ShowFull = false;
            }
        }
    }

    private void ShowFull(Guid id)
    {
        if (expandedItemStates.TryGetValue(id, out var state))
        {
            state.ShowFull = true;
        }
    }

    private void ShowExcerpt(Guid id)
    {
        if (expandedItemStates.TryGetValue(id, out var state))
        {
            state.ShowFull = false;
        }
    }

    private void Collapse(Guid id)
    {
        if (expandedItemStates.TryGetValue(id, out var state))
        {
            state.Expanded = false;
            state.ShowFull = false;
        }
    }

    private static string GetStatusValue(HtmlContentDto item)
        => item.IsPublished ? "Published" : item.IsReviewRequested ? "Review" : "Draft";

    private async Task ChangeStatusAsync(HtmlContentDto item, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return;
        }

        var status = value switch
        {
            "Published" => HtmlContentStatus.Published,
            "Review" => HtmlContentStatus.Review,
            _ => HtmlContentStatus.Draft
        };

        await HtmlSvc.SetStatusAsync(item.Id, item.Revision, status);

        if (items is not null)
        {
            var index = items.IndexOf(item);
            if (index >= 0)
            {
                var updated = item with
                {
                    IsPublished = status == HtmlContentStatus.Published,
                    IsReviewRequested = status == HtmlContentStatus.Review
                };

                items[index] = updated;
                item = updated;
            }
        }
    }

    private class ItemState
    {
        public bool Expanded { get; set; }
        public bool ShowFull { get; set; }
    }
}

