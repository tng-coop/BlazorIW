@page "/storage"
@rendermode InteractiveWebAssembly
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<StorageDemo> L
@inject LocalizationService Localization

<PageTitle>@L["Storage Demo"]</PageTitle>

@inject BrowserStorageService Storage

<h1>@L["Browser Storage Demo"]</h1>

<div class="mb-3">
    <input class="form-control" placeholder="@L["Enter value"]" @bind="inputValue" />
</div>

<div class="mb-3">
    <button class="btn btn-primary me-1" @onclick="SaveLocalAsync">@L["Save Local"]</button>
    <button class="btn btn-secondary me-1" @onclick="LoadLocalAsync">@L["Load Local"]</button>
    <button class="btn btn-outline-danger me-1" @onclick="ClearLocalAsync">@L["Clear Local"]</button>
</div>

<div class="mb-3">
    <button class="btn btn-primary me-1" @onclick="SaveSessionAsync">@L["Save Session"]</button>
    <button class="btn btn-secondary me-1" @onclick="LoadSessionAsync">@L["Load Session"]</button>
    <button class="btn btn-outline-danger me-1" @onclick="ClearSessionAsync">@L["Clear Session"]</button>
</div>

<p>@L["Stored value:"] @storedValue</p>

@code {
    private string? inputValue;
    private string? storedValue;
    private const string StorageKey = "storage-demo-value";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            storedValue = await Storage.GetLocalStorageAsync(StorageKey);
            StateHasChanged();
        }
    }

    private async Task SaveLocalAsync()
    {
        await Storage.SetLocalStorageAsync(StorageKey, inputValue ?? string.Empty);
    }

    private async Task LoadLocalAsync()
    {
        storedValue = await Storage.GetLocalStorageAsync(StorageKey);
    }

    private async Task ClearLocalAsync()
    {
        await Storage.RemoveLocalStorageAsync(StorageKey);
        storedValue = null;
    }

    private async Task SaveSessionAsync()
    {
        await Storage.SetSessionStorageAsync(StorageKey, inputValue ?? string.Empty);
    }

    private async Task LoadSessionAsync()
    {
        storedValue = await Storage.GetSessionStorageAsync(StorageKey);
    }

    private async Task ClearSessionAsync()
    {
        await Storage.RemoveSessionStorageAsync(StorageKey);
        storedValue = null;
    }
}
