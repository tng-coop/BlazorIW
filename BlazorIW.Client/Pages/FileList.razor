@page "/files"

<PageTitle>File List</PageTitle>

@inject BlazorIW.Client.Services.FileService FileService
@inject HttpClient Http

<h1>Files under wwwroot</h1>

@if (files == null)
{
    <p>Loading...</p>
}
else if (!files.Any())
{
    <p>No files found.</p>
}
else
{
    <button class="btn btn-primary mb-2" @onclick="AssessFiles" disabled="@isAssessing">Start Assessment</button>
    <table class="table">
        <thead>
            <tr>
                <th>Path</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in files)
            {
                <tr>
                    <td>@file.Path</td>
                    <td>@GetStatus(file.Path)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WebRootFileInfo>? files;
    private readonly Dictionary<string, string> statuses = new();
    private bool isAssessing;

    protected override async Task OnInitializedAsync()
    {
        files = await FileService.GetFilesAsync();
    }

    private string GetStatus(string path) => statuses.TryGetValue(path, out var s) ? s : string.Empty;

    private async Task AssessFiles()
    {
        if (files == null)
        {
            return;
        }

        isAssessing = true;
        foreach (var file in files)
        {
            statuses[file.Path] = "Checking...";
            StateHasChanged();
            try
            {
                using var request = new HttpRequestMessage(HttpMethod.Head, file.Path);
                using var response = await Http.SendAsync(request);
                statuses[file.Path] = response.IsSuccessStatusCode ? "Available" : $"Failed ({(int)response.StatusCode})";
            }
            catch
            {
                statuses[file.Path] = "Error";
            }
            StateHasChanged();
        }
        isAssessing = false;
    }
}
